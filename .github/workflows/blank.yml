# This is a basic workflow to help you get started with Actions
name: CI
env:
  TARGET: "All"

on: 
  push:

jobs:
  Compile:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      #- name: testrun
      #  run:  powershell "dir env:"
      - name: restore
        run:  "dotnet tool restore"
      - name: compile base
        run:  .\pipeline_scripts\CompileAll.cmd Base -ci $env:GITHUB_WORKSPACE
      - name: compile target
        run:  .\pipeline_scripts\CompileAll.cmd $env:TARGET -ci $env:GITHUB_WORKSPACE
      - name: print GITHUB_WORKSPACE
        run:  powershell "echo $env:GITHUB_WORKSPACE"
      #- name: CD into GITHUB_WORKSPACE
      #  run:  powershell "cd $env:GITHUB_WORKSPACE"
      #- name: print GITHUB_ACTION_PATH
      #  run:  powershell "echo $env:GITHUB_ACTION_PATH"        
      #- name: script
      #  run:  python print.py

  UnitTest:
    needs: Compile
    runs-on: self-hosted
    steps:
     - name: Run Unit Tests
       run: .\pipeline_scripts\RunUnitTests.cmd -ci $env:GITHUB_WORKSPACE

  CheckCoverage:
    needs: UnitTest
    runs-on: self-hosted
    steps:
      - name: New-Item
        run: PowerShell -Command "New-Item -ItemType Directory -Path .\logs"
      - name: RunCoverageTests
        with: 
          timeout_minutes: 10
          max_attempts: 3
          continue_on_error: true
          run: echo R | PowerShell -Command "& {Set-ExecutionPolicy -Scope Process -ExecutionPolicy Unrestricted -Force; .\pipeline_scripts\RunCoverageTests.ps1 -IgnoreFilter 'TOSUserSDK;*.UnitTest*;PstateTest;FIVRDACFitTC;MEMDECODE_CLK_FLL_ALL;PTHCalcTC;PllVidWalkTC;MbistHRYTC;FIVRTrimTC;MbistRasterRepairTC;MbistShared'}"
          #  run: .\pipeline_scripts\RunCoverageTests.ps1 All $env:GITHUB_WORKSPACE
      - name: CoverageGater
        run: .\pipeline_scripts\CoverageGater\coverageGater.py --Config .\pipeline_scripts\CoverageGater\config.json

      - name: CD into GITHUB_WORKSPACE
        run:  powershell "cd $env:GITHUB_WORKSPACE"
      # allow_failure: true

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: .\logs
          retention-days: 7
          
  Release:
    needs: CheckCoverage
    runs-on: self-hosted
    steps:
      - name: Hello
        run: echo "The key is:${{secrets.WIKI_AUTHKEY}}"  
      - name: Hello
        run: echo $env:GITHUB_REF_NAME         
      - name: Run DocParser
        run: .\pipeline_scripts\DocParser.py
      - name: Run wiki_builder.py
        run: .\pipeline_scripts\wiki_builder.py -commit_ref $env:GITHUB_REF_NAME
      - name: Sleep for 30 seconds
        run: Start-Sleep -s 30
      #- name: Run CopyFolder.cmd
      #  run: .\pipeline_scripts\CopyFolder.cmd $env:GITHUB_REF_NAME
      #- name: Run emailRelease.exe
      #  run: .\pipeline_scripts\emailRelease.exe



















         
