// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INTEL CONFIDENTIAL
// Copyright (2019) (2022) Intel Corporation
//
// The source code contained or described herein and all documents related to the source code ("Material") are
// owned by Intel Corporation or its suppliers or licensors. Title to the Material remains with Intel Corporation
// or its suppliers and licensors. The Material contains trade secrets and proprietary and confidential
// information of Intel Corporation or its suppliers and licensors. The Material is protected by worldwide copyright
// and trade secret laws and treaty provisions. No part of the Material may be used, copied, reproduced, modified,
// published, uploaded, posted, transmitted, distributed, or disclosed in any way without Intel Corporation's prior express
// written permission.
//
// No license under any patent, copyright, trade secret or other intellectual property right is granted to or
// conferred upon you by disclosure or delivery of the Materials, either expressly, by implication, inducement,
// estoppel or otherwise. Any license under such intellectual property rights must be express and approved by
// Intel in writing.
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace LSARasterTC.UnitTest
{
    using System;
    using System.Collections.Generic;
    using global::LSARasterTC;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Moq;
    using Prime.ConsoleService;

    /// <summary> Dummy description of this test method's unit test.</summary>
    [TestClass]
    public class MetadataConfig_UnitTest
    {
        private Mock<IConsoleService> mockConsole = new Mock<IConsoleService>();

        // schema used for validation tests.
        private string schema = "{ \"$schema\":\"http://json-schema.org/draft-07/schema\", \"$id\":\"http://example.com/example.json\", \"type\":\"object\", \"required\":[\"Setup\"], \"properties\":{ \"Setup\":{ \"$id\":\"#/properties/Setup\", \"type\":\"object\", \"title\":\"Setupschema\", \"description\":\"Schemafortherootobject\", \"required\":[\"PatModConfigSets\",\"CaptureConfigSets\",\"SlicePinMapping\"], \"properties\":{ \"PatModConfigSets\":{ \"type\":\"object\", \"additonalProperties\":{\"$ref\":\"#/definitions/PatternModifiers\"} }, \"CaptureConfigSets\":{ \"type\":\"object\", \"additionalProperties\":{\"$ref\":\"#/definitions/CaptureSet\"} }, \"SlicePinMapping\":{ \"type\":\"object\", \"additionalProperties\":{\"$ref\":\"#/definitions/PinMappingSet\"} } } } }, \"definitions\":{ \"PatternModifiers\":{ \"$id\":\"#/definitions/PatternModifiers\", \"type\":\"array\", \"title\":\"PatternModifiersNamedefinition\", \"description\":\"StringnametolistofPatternModifyobjectsrelationship\", \"minItems\":1, \"uniqueItems\":true, \"items\":{\"type\":\"string\"} }, \"CaptureSet\":{ \"$id\":\"#/definitions/CaptureSet\", \"type\":\"object\", \"title\":\"CaptureSetdefinition\", \"description\":\"DefinitionforaCaptureSetobject.\", \"properties\":{ \"Length\":{\"type\":\"integer\"}, \"DecodingElements\":{ \"type\":\"object\", \"additionalProperties\":{\"$ref\":\"#/definitions/DecodingElement\"} } }, \"required\":[\"Length\",\"DecodingElements\"] }, \"DecodingElement\":{ \"type\":\"object\", \"properties\":{ \"Start\":{\"type\":\"integer\"}, \"End\":{\"type\":\"integer\"} }, \"required\":[\"Start\",\"End\"] }, \"PinMappingSet\":{ \"$id\":\"#/definitions/PinMappingSet\", \"type\":\"object\", \"title\":\"PinMappingSetdefinition\", \"description\":\"DefinitionforaPinMappingSetobject.\", \"properties\":{ \"MulticorePatternEnabled\":{ \"type\":\"boolean\", \"default\":false }, \"Configurations\":{ \"type\":\"object\", \"properties\":{ \"ArrayNameRegex\":{\"type\":\"string\"}, \"IsRasterModeSupported\":{\"type\":\"boolean\"}, \"IsGetDwordFromFailIoIndex\":{\"type\":\"boolean\"}, \"PreScreenLabelRegex\":{\"type\":\"string\"}, \"LabelRegExTokens\":{ \"type\":\"array\", \"minItems\":1, \"uniqueItems\":true, \"items\":{\"type\":\"string\"} } }, \"required\":[\"ArrayNameRegex\",\"IsRasterModeSupported\",\"IsGetDwordFromFailIoIndex\",\"PreScreenLabelRegex\",\"LabelRegExTokens\"] }, \"PinMappings\":{ \"type\":\"array\", \"items\":{\"$ref\":\"#/definitions/PinMapping\"} } } }, \"PinMapping\":{ \"type\":\"object\", \"properties\":{ \"SliceId\":{\"type\":\"string\"}, \"PinName\":{ \"type\":\"string\", \"default\":\"\" }, \"PatName\":{ \"type\":\"string\", \"default\":\"\" }, \"HryName\":{\"type\":\"string\"}, \"HryNamePrefix\":{\"type\":\"string\"} }, \"oneOf\":[ {\"required\":[\"HryNamePrefix\"]}, {\"required\":[\"HryName\"]} ], \"anyOf\":[ {\"required\":[\"PinName\"]}, {\"required\":[\"PatName\"]} ] } } }";

        /// <summary>
        /// Initialize method for test class.
        /// </summary>
        [TestInitialize]
        public void Init()
        {
            // copying Chris' mocking of console service
            this.mockConsole.Setup(x => x.PrintError(It.IsAny<string>(), It.IsAny<int>(), It.IsAny<string>(), It.IsAny<string>()))
                .Callback<string, int, string, string>((string msg, int line, string n, string src) => { Console.WriteLine($"ERROR: {msg}"); });
            this.mockConsole.Setup(x => x.PrintDebug(It.IsAny<string>()))
                .Callback<string>((string msg) => { Console.WriteLine($"{msg}"); });
            Prime.Services.ConsoleService = this.mockConsole.Object;
        }

        /// <summary>
        /// Check that ValidateInput returns false with empty input.
        /// </summary>
        public void MissingPinMappingSetElements()
        {
            string missingElements = "{ \"Setup\":{ \"PatModConfigSets\":{ \"LSA_RASTER_PAT_MODIFY_SET_CORE\":[ { \"PatTarget\":\"MaxDefectsCount\", \"Pin\":\"TDI\", \"Label\":\"Defect_count*\", \"Domain\":\"LEG\", \"Offset\":2, \"Length\":1 }, { \"PatTarget\":\"Multiport\", \"Pin\":\"TDI\", \"Label\":\"MPMAP_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"Bank\", \"Pin\":\"TDI\", \"Label\":\"BANKSEL.+|T_B_M.+\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"Dword\", \"Pin\":\"TDI\", \"Label\":\"DWORD.+|S_B_M.+\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"IOMask\", \"Pin\":\"TDI\", \"Label\":\"XCare_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":32 } ] }, \"CaptureConfigSets\":{ \"LSA_RASTER_CAPTURE_DECODING_SET_CORE\":{ \"Length\":82, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":30, \"End\":41 }, \"Dword\":{ \"Start\":42, \"End\":45 }, \"Bank\":{ \"Start\":46, \"End\":49 }, \"FailIO\":{ \"Start\":50, \"End\":81 } } } }, \"SlicePinMapping\":{ \"4_CORES\":{ \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_([a-zA-Z0-9]+_[a-zA-Z0-9]+_?[a-zA-Z0-9]*)_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_MBD_([0-9]+)_([0-9]+)_([0-9]+)\", \"LabelRegExTokens\":[ \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"HryName\":\"C0\" }, { \"SliceId\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"SliceId\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"SliceId\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] } } } }";
            var serializedInput = new JsonInput(missingElements);

            Assert.IsFalse(serializedInput.Validate(this.schema));
        }

        /// <summary>
        /// Fail validation when Json in missing elements.
        /// </summary>
        public void MissingCaptureSetElements()
        {
            string missingElements = "{ \"Setup\":{ \"PatModConfigSets\":{ \"LSA_RASTER_PAT_MODIFY_SET_CORE\":[ { \"PatTarget\":\"MaxDefectsCount\", \"Pin\":\"TDI\", \"Label\":\"Defect_count*\", \"Domain\":\"LEG\", \"Offset\":2, \"Length\":1 }, { \"PatTarget\":\"Multiport\", \"Pin\":\"TDI\", \"Label\":\"MPMAP_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"Bank\", \"Pin\":\"TDI\", \"Label\":\"BANKSEL.+|T_B_M.+\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"Dword\", \"Pin\":\"TDI\", \"Label\":\"DWORD.+|S_B_M.+\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"IOMask\", \"Pin\":\"TDI\", \"Label\":\"XCare_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":32 } ] }, \"CaptureConfigSets\":{ \"LSA_RASTER_CAPTURE_DECODING_SET_CORE\":{ \"DecodingElements\":{ \"FailAddress\":{ \"Start\":30, \"End\":41 }, \"Dword\":{ \"Start\":42, }, \"Bank\":{ \"Start\":46, \"End\":49 }, \"FailIO\":{ \"Start\":50, \"End\":81 } } } }, \"SlicePinMapping\":{ \"4_CORES\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_([a-zA-Z0-9]+_[a-zA-Z0-9]+_?[a-zA-Z0-9]*)_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_MBD_([0-9]+)_([0-9]+)_([0-9]+)\", \"LabelRegExTokens\":[ \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"NOAB_00\", \"HryName\":\"C0\" }, { \"SliceId\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"SliceId\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"SliceId\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] } } } }";
            var serializedInput = new JsonInput(missingElements);

            Assert.IsFalse(serializedInput.Validate(this.schema));
        }

        /// <summary>
        /// Check that ValidateInput returns true when checking a valid metadata config file.
        /// </summary>
        [TestMethod]
        public void SuccessValidateInput()
        {
            string validInput = "{ \"Setup\":{ \"PatModConfigSets\":{ \"LSA_RASTER_PAT_MODIFY_SET_CORE\":[ { \"PatTarget\":\"MaxDefectsCount\", \"Pin\":\"TDI\", \"Label\":\"Defect_count*\", \"Domain\":\"LEG\", \"Offset\":2, \"Length\":1 }, { \"PatTarget\":\"Multiport\", \"Pin\":\"TDI\", \"Label\":\"MPMAP_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"Bank\", \"Pin\":\"TDI\", \"Label\":\"BANKSEL.+|T_B_M.+\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"Dword\", \"Pin\":\"TDI\", \"Label\":\"DWORD.+|S_B_M.+\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"IOMask\", \"Pin\":\"TDI\", \"Label\":\"XCare_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":32 } ], \"LSA_RASTER_PAT_MODIFY_SET_CBO\":[ { \"PatTarget\":\"MaxDefectsCount\", \"Pin\":\"TDI\", \"Label\":\"Defect_count*\", \"Domain\":\"LEG\", \"Offset\":2, \"Length\":1 }, { \"PatTarget\":\"Multiport\", \"Pin\":\"TDI\", \"Label\":\"mpmap_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"Bank\", \"Pin\":\"TDI\", \"Label\":\"banksel.+|T_B_M.+\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"Dword\", \"Pin\":\"TDI\", \"Label\":\"dword.+|S_B_M.+\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"IOMask\", \"Pin\":\"TDI\", \"Label\":\"xcare*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":32 } ], \"LSA_RASTER_PAT_MODIFY_SET_SA\":[ { \"PatTarget\":\"MaxDefectsCount\", \"Pin\":\"TDI\", \"Label\":\"Defect_count*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":1 }, { \"PatTarget\":\"Multiport\", \"Pin\":\"TDI\", \"Label\":\"MPMAP_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"Bank\", \"Pin\":\"TDI\", \"Label\":\"*BANKSEL_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"Dword\", \"Pin\":\"TDI\", \"Label\":\"DWORD_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":4 }, { \"PatTarget\":\"IOMask\", \"Pin\":\"TDI\", \"Label\":\"XCare_*\", \"Domain\":\"LEG\", \"Offset\":0, \"Length\":32 } ] }, \"CaptureConfigSets\":{ \"LSA_RASTER_CAPTURE_DECODING_SET_CORE\":{ \"Length\":82, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":30, \"End\":41 }, \"Dword\":{ \"Start\":42, \"End\":45 }, \"Bank\":{ \"Start\":46, \"End\":49 }, \"FailIO\":{ \"Start\":50, \"End\":81 } } }, \"LSA_RASTER_CAPTURE_DECODING_SET_CBO\":{ \"Length\":52, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":0, \"End\":11 }, \"Dword\":{ \"Start\":12, \"End\":15 }, \"Bank\":{ \"Start\":16, \"End\":19 }, \"FailIO\": { \"Start\":20, \"End\":51 } } }, \"LSA_RASTER_CAPTURE_DECODING_SET_SA\":{ \"Length\":52, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":0, \"End\":11 }, \"Dword\":{ \"Start\":12, \"End\":15 }, \"Bank\":{ \"Start\":16, \"End\":19 }, \"FailIO\":{ \"Start\":20, \"End\":51 } } } }, \"SlicePinMapping\":{ \"4_CORES\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_([a-zA-Z0-9]+_[a-zA-Z0-9]+_?[a-zA-Z0-9]*)_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_MBD_([0-9]+)_([0-9]+)_([0-9]+)\", \"LabelRegExTokens\":[ \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"NOAB_00\", \"HryName\":\"C0\" }, { \"SliceId\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"SliceId\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"SliceId\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] }, \"CCF_SLICE_0\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_([a-zA-Z0-9]+_[a-zA-Z0-9]+_?[a-zA-Z0-9]*)_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7]+)_([0-9]+)_([0-9]+)_([0-9]+)\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"TDO\", \"HryName\":\"C0\" } ] }, \"CCF_SLICE_1\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_([a-zA-Z0-9]+_[a-zA-Z0-9]+_?[a-zA-Z0-9]*)_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7]+)_([0-9]+)_([0-9]+)_([0-9]+)\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"1\", \"PinName\":\"TDO\", \"HryName\":\"C1\" } ] }, \"CCF_SLICE_2\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_([a-zA-Z0-9]+_[a-zA-Z0-9]+_?[a-zA-Z0-9]*)_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7]+)_([0-9]+)_([0-9]+)_([0-9]+)\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"2\", \"PinName\":\"TDO\", \"HryName\":\"C2\" } ] }, \"CCF_SLICE_3\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_([a-zA-Z0-9]+_[a-zA-Z0-9]+_?[a-zA-Z0-9]*)_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7]+)_([0-9]+)_([0-9]+)_([0-9]+)\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"3\", \"PinName\":\"TDO\", \"HryName\":\"C3\" } ] }, \"4_SLICES_CBO\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_([a-zA-Z0-9]+_[a-zA-Z0-9]+)_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7]+)_([0-9]+)_([0-9]+)_([0-9]+)\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"NOAB_00\", \"HryName\":\"C0\" }, { \"SliceId\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"SliceId\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"SliceId\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] } } } }";
            var serializedInput = new JsonInput(validInput);

            Assert.IsTrue(serializedInput.Validate(this.schema));
        }

        /// <summary>
        /// Check that JsonInput can be deserialized into a LSARasterInput obj.
        /// </summary>
        [TestMethod]
        public void DeserializeInput()
        {
            string validInput = "{ \"Setup\":{ \"PatModConfigSets\":{ \"LSA_RASTER_PAT_MODIFY_SET_CORE\":[\"MaxDefectsCount\",\"Multiport\",\"Dword\",\"IOMask\"], \"LSA_RASTER_PAT_MODIFY_SET_CBO\":[\"MaxDefectsCount\",\"Multiport\",\"Bank\",\"Dword\",\"IOMask\"], \"LSA_RASTER_PAT_MODIFY_SET_SA\":[\"MaxDefectsCount\",\"Multiport\",\"Bank\",\"Dword\",\"IOMask\"] }, \"CaptureConfigSets\":{ \"LSA_RASTER_CAPTURE_DECODING_SET_CORE\":{ \"Length\":82, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":30, \"End\":41 }, \"Dword\":{ \"Start\":42, \"End\":45 }, \"Bank\":{ \"Start\":46, \"End\":49 }, \"FailIO\":{ \"Start\":50, \"End\":81 } } }, \"LSA_RASTER_CAPTURE_DECODING_SET_CBO\":{ \"Length\":52, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":0, \"End\":11 }, \"Dword\":{ \"Start\":12, \"End\":15 }, \"Bank\":{ \"Start\":16, \"End\":19 }, \"FailIO\": { \"Start\":20, \"End\":51 } } }, \"LSA_RASTER_CAPTURE_DECODING_SET_SA\":{ \"Length\":52, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":0, \"End\":11 }, \"Dword\":{ \"Start\":12, \"End\":15 }, \"Bank\":{ \"Start\":16, \"End\":19 }, \"FailIO\":{ \"Start\":20, \"End\":51 } } } }, \"SlicePinMapping\":{ \"4_CORES\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_MBD_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"NOAB_00\", \"HryName\":\"C0\" }, { \"SliceId\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"SliceId\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"SliceId\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] }, \"CCF_SLICE_0\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"TDO\", \"HryName\":\"C0\" } ] }, \"CCF_SLICE_1\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"1\", \"PinName\":\"TDO\", \"HryName\":\"C1\" } ] }, \"CCF_SLICE_2\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"2\", \"PinName\":\"TDO\", \"HryName\":\"C2\" } ] }, \"CCF_SLICE_3\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"3\", \"PinName\":\"TDO\", \"HryName\":\"C3\" } ] }, \"4_SLICES_CBO\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9])_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"NOAB_00\", \"HryName\":\"C0\" }, { \"SliceId\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"SliceId\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"SliceId\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] } } } }";
            var serializedInput = new JsonInput(validInput);
            var deserializedInput = serializedInput.DeserializeInput<MetadataConfig>();

            Assert.IsInstanceOfType(deserializedInput, typeof(MetadataConfig));
            Assert.IsNotNull(deserializedInput.Setup);
            Assert.IsNotNull(deserializedInput.Setup.CaptureConfigSets);
            Assert.IsNotNull(deserializedInput.Setup.PatModConfigSets);
            Assert.IsNotNull(deserializedInput.Setup.SlicePinMapping);
        }

        /// <summary>
        /// Check that a config containing module info can deserialize into a MetadataConfig.
        /// </summary>
        [TestMethod]
        public void DeserializeInput_ModulePinMappingSet()
        {
            string validInput = "{ \"Setup\":{ \"PatModConfigSets\":{ \"LSA_RASTER_PAT_MODIFY_SET_CORE\":[\"MaxDefectsCount\",\"Multiport\",\"Dword\",\"IOMask\"], \"LSA_RASTER_PAT_MODIFY_SET_CBO\":[\"MaxDefectsCount\",\"Multiport\",\"Bank\",\"Dword\",\"IOMask\"], \"LSA_RASTER_PAT_MODIFY_SET_SA\":[\"MaxDefectsCount\",\"Multiport\",\"Bank\",\"Dword\",\"IOMask\"] }, \"CaptureConfigSets\":{ \"LSA_RASTER_CAPTURE_DECODING_SET_CORE\":{ \"Length\":82, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":30, \"End\":41 }, \"Dword\":{ \"Start\":42, \"End\":45 }, \"Bank\":{ \"Start\":46, \"End\":49 }, \"FailIO\":{ \"Start\":50, \"End\":81 } } }, \"LSA_RASTER_CAPTURE_DECODING_SET_CBO\":{ \"Length\":52, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":0, \"End\":11 }, \"Dword\":{ \"Start\":12, \"End\":15 }, \"Bank\":{ \"Start\":16, \"End\":19 }, \"FailIO\":{ \"Start\":20, \"End\":51 } } }, \"LSA_RASTER_CAPTURE_DECODING_SET_SA\":{ \"Length\":52, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":0, \"End\":11 }, \"Dword\":{ \"Start\":12, \"End\":15 }, \"Bank\":{ \"Start\":16, \"End\":19 }, \"FailIO\":{ \"Start\":20, \"End\":51 } } } }, \"SlicePinMapping\":{ \"MODULE_EXAMPLE\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_([a-zA-Z0-9]+_[a-zA-Z0-9]+_?[a-zA-Z0-9]*)_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9]+\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7]+)_([0-9]+)_([0-9]+)_([0-9]+)\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"Module\":\"0\", \"PinName\":\"NOAB_00\", \"HryName\":\"C0\" }, { \"Module\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"Module\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"Module\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] } } } }";
            var serializedInput = new JsonInput(validInput);
            var deserializedInput = serializedInput.DeserializeInput<MetadataConfig>();
            var pinMappingSet = deserializedInput.GetPinMappingSet("MODULE_EXAMPLE");
            bool isValid = pinMappingSet.ValidateAndSetupItems();

            Assert.IsTrue(isValid);
        }

        /// <summary>
        /// Check that MetadataConfig can be validated after deserialization.
        /// </summary>
        [TestMethod]
        public void ValidateDeserializedConfig()
        {
            string validInput = "{ \"Setup\":{ \"PatModConfigSets\":{ \"LSA_RASTER_PAT_MODIFY_SET_CORE\":[\"MaxDefectsCount\",\"Multiport\",\"Dword\",\"IOMask\"], \"LSA_RASTER_PAT_MODIFY_SET_CBO\":[\"MaxDefectsCount\",\"Multiport\",\"Bank\",\"Dword\",\"IOMask\"], \"LSA_RASTER_PAT_MODIFY_SET_SA\":[\"MaxDefectsCount\",\"Multiport\",\"Bank\",\"Dword\",\"IOMask\"] }, \"CaptureConfigSets\":{ \"LSA_RASTER_CAPTURE_DECODING_SET_CORE\":{ \"Length\":82, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":30, \"End\":41 }, \"Dword\":{ \"Start\":42, \"End\":45 }, \"Bank\":{ \"Start\":46, \"End\":49 }, \"FailIO\":{ \"Start\":50, \"End\":81 } } }, \"LSA_RASTER_CAPTURE_DECODING_SET_CBO\":{ \"Length\":52, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":0, \"End\":11 }, \"Dword\":{ \"Start\":12, \"End\":15 }, \"Bank\":{ \"Start\":16, \"End\":19 }, \"FailIO\": { \"Start\":20, \"End\":51 } } }, \"LSA_RASTER_CAPTURE_DECODING_SET_SA\":{ \"Length\":52, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":0, \"End\":11 }, \"Dword\":{ \"Start\":12, \"End\":15 }, \"Bank\":{ \"Start\":16, \"End\":19 }, \"FailIO\":{ \"Start\":20, \"End\":51 } } } }, \"SlicePinMapping\":{ \"4_CORES\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_MBD_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"NOAB_00\", \"HryName\":\"C0\" }, { \"SliceId\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"SliceId\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"SliceId\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] }, \"CCF_SLICE_0\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"TDO\", \"HryName\":\"C0\" } ] }, \"CCF_SLICE_1\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"1\", \"PinName\":\"TDO\", \"HryName\":\"C1\" } ] }, \"CCF_SLICE_2\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"2\", \"PinName\":\"TDO\", \"HryName\":\"C2\" } ] }, \"CCF_SLICE_3\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"3\", \"PinName\":\"TDO\", \"HryName\":\"C3\" } ] }, \"4_SLICES_CBO\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9])_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"NOAB_00\", \"HryName\":\"C0\" }, { \"SliceId\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"SliceId\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"SliceId\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] } } } }";
            var serializedInput = new JsonInput(validInput);
            var deserializedInput = serializedInput.DeserializeInput<MetadataConfig>();
            var pinMappingSet = deserializedInput.GetPinMappingSet("4_CORES");
            bool isValid = pinMappingSet.ValidateAndSetupItems();

            Assert.IsTrue(isValid);
        }

        /// <summary>
        /// Fetch all pins needed to collect data from metadata.
        /// </summary>
        [TestMethod]
        public void GetPinsForCtvDataCollection()
        {
            string validInput = "{ \"Setup\":{ \"PatModConfigSets\":{ \"LSA_RASTER_PAT_MODIFY_SET_CORE\":[\"MaxDefectsCount\",\"Multiport\",\"Dword\",\"IOMask\"], \"LSA_RASTER_PAT_MODIFY_SET_CBO\":[\"MaxDefectsCount\",\"Multiport\",\"Bank\",\"Dword\",\"IOMask\"], \"LSA_RASTER_PAT_MODIFY_SET_SA\":[\"MaxDefectsCount\",\"Multiport\",\"Bank\",\"Dword\",\"IOMask\"] }, \"CaptureConfigSets\":{ \"LSA_RASTER_CAPTURE_DECODING_SET_CORE\":{ \"Length\":82, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":30, \"End\":41 }, \"Dword\":{ \"Start\":42, \"End\":45 }, \"Bank\":{ \"Start\":46, \"End\":49 }, \"FailIO\":{ \"Start\":50, \"End\":81 } } }, \"LSA_RASTER_CAPTURE_DECODING_SET_CBO\":{ \"Length\":52, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":0, \"End\":11 }, \"Dword\":{ \"Start\":12, \"End\":15 }, \"Bank\":{ \"Start\":16, \"End\":19 }, \"FailIO\": { \"Start\":20, \"End\":51 } } }, \"LSA_RASTER_CAPTURE_DECODING_SET_SA\":{ \"Length\":52, \"DecodingElements\":{ \"FailAddress\":{ \"Start\":0, \"End\":11 }, \"Dword\":{ \"Start\":12, \"End\":15 }, \"Bank\":{ \"Start\":16, \"End\":19 }, \"FailIO\":{ \"Start\":20, \"End\":51 } } } }, \"SlicePinMapping\":{ \"4_CORES\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_MBD_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"NOAB_00\", \"HryName\":\"C0\" }, { \"SliceId\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"SliceId\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"SliceId\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] }, \"CCF_SLICE_0\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"TDO\", \"HryName\":\"C0\" } ] }, \"CCF_SLICE_1\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"1\", \"PinName\":\"TDO\", \"HryName\":\"C1\" } ] }, \"CCF_SLICE_2\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"2\", \"PinName\":\"TDO\", \"HryName\":\"C2\" } ] }, \"CCF_SLICE_3\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9]_?[a-zA-Z0-9]*)_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"3\", \"PinName\":\"TDO\", \"HryName\":\"C3\" } ] }, \"4_SLICES_CBO\":{ \"MulticorePatternEnabled\":false, \"Configurations\":{ \"ArrayNameRegex\":\"[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_([a-zA-Z0-9]_[a-zA-Z0-9])_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]_[a-zA-Z0-9]\", \"IsRasterModeSupported\":true, \"IsGetDwordFromFailIoIndex\":false, \"PreScreenLabelRegex\":\"_S?MBD_?X?_([0-7])_([0-9])_([0-9])_([0-9])\", \"LabelRegExTokens\":[ \"SLICE\", \"MULTIPORT\", \"BANK\", \"DWORD\" ] }, \"PinMappings\":[ { \"SliceId\":\"0\", \"PinName\":\"NOAB_00\", \"HryName\":\"C0\" }, { \"SliceId\":\"1\", \"PinName\":\"NOAB_01\", \"HryName\":\"C1\" }, { \"SliceId\":\"2\", \"PinName\":\"NOAB_02\", \"HryName\":\"C2\" }, { \"SliceId\":\"3\", \"PinName\":\"NOAB_03\", \"HryName\":\"C3\" } ] } } } }";
            var serializedInput = new JsonInput(validInput);
            var deserializedInput = serializedInput.DeserializeInput<MetadataConfig>();
            var pinMappingSet = deserializedInput.GetPinMappingSet("4_CORES");

            List<string> pinsZero = pinMappingSet.GetPinMappedToRootKey(new List<string> { "0" });
            List<string> pinsOne = pinMappingSet.GetPinMappedToRootKey(new List<string> { "1" });
            Assert.IsTrue(pinsZero.Contains("NOAB_00") && pinsOne.Contains("NOAB_01"));
        }
    }
}
