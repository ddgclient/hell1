// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INTEL CONFIDENTIAL
// Copyright (2019) (2022) Intel Corporation
//
// The source code contained or described herein and all documents related to the source code ("Material") are
// owned by Intel Corporation or its suppliers or licensors. Title to the Material remains with Intel Corporation
// or its suppliers and licensors. The Material contains trade secrets and proprietary and confidential
// information of Intel Corporation or its suppliers and licensors. The Material is protected by worldwide copyright
// and trade secret laws and treaty provisions. No part of the Material may be used, copied, reproduced, modified,
// published, uploaded, posted, transmitted, distributed, or disclosed in any way without Intel Corporation's prior express
// written permission.
//
// No license under any patent, copyright, trade secret or other intellectual property right is granted to or
// conferred upon you by disclosure or delivery of the Materials, either expressly, by implication, inducement,
// estoppel or otherwise. Any license under such intellectual property rights must be express and approved by
// Intel in writing.
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

// ---------------------------------------------------------------
// Created By Tim Kirkham
// ---------------------------------------------------------------
namespace MbistVminTC.UnitTest
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using DDG;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Moq;
    using Newtonsoft.Json;
    using Prime.ConsoleService;
    using Prime.DffService;
    using Prime.FileService;
    using Prime.SharedStorageService;
    using Prime.TestProgramService;

    /// <summary>
    /// MbistVminTC_UnitTest.
    /// </summary>
    [TestClass]
    public class Bisr_UnitTest : MbistVminTC
    {
        // private string testConfigFile = Directory.GetFiles("../../src/TestMethods/Digital/ARR_MBIST/MbistVminTC/InputFiles", "Exampleconfig_WW40_v2_PerPattern.json")[0];
        // private string testConfigFileKS = Directory.GetFiles("../../src/TestMethods/Digital/ARR_MBIST/MbistVminTC/InputFiles", "MBIST_HRY_KS.json")[0];
        private Mock<IPinMap> pinMapMock;
        private Mock<IVminForwardingCorner> vminForwardingMock;

        // private Mock<IVoltageConverter> voltageConverterMock;
        private Mock<ISharedStorageService> sharedStorageMock;
        private Dictionary<string, string> sharedStorageValues;
        private Dictionary<string, string> dffdata;
        private Mock<IDffService> dffStorageMock;

        private Mock<IConsoleService> ConsoleServiceMock { get; set; }

        private Mock<ITestProgramService> TestProgramServiceMock { get; set; }

        private Mock<ITestProgramService> TestProgramServiceMockString { get; set; }

        private Hry Testhry { get; set; }

        /// <summary>
        /// Sets empty params.
        /// </summary>
        [TestInitialize]
        public void InitializingTestMethod()
        {
            this.MbistTestMode = MbistVminTC.MbistTestModes.HRY;
            this.FeatureSwitchSettings = string.Empty;
            this.LookupTableConfigurationFile = "Exampleconfig_WW40_v2_PerPattern.json";
            this.LogLevel = PrimeLogLevel.PRIME_DEBUG;

            // this.PatternModifications = string.Empty;
            this.CornerIdentifiers = string.Empty;
            this.FlowNumber = "-99";
            this.Threads = 2;
            this.Patlist = "Plist_BISR_1";
            this.LevelsTc = "SomeLevels";
            this.VoltageTargets = "Domain";
            this.ForceConfigFileParseState = EnableStates.Enabled;
            this.LogLevel = PrimeLogLevel.TEST_METHOD;

            // Default Mock for Shared service.
            this.sharedStorageValues = new Dictionary<string, string>();
            this.sharedStorageMock = new Mock<ISharedStorageService>(MockBehavior.Strict);
            this.sharedStorageMock.Setup(o => o.InsertRowAtTable(It.IsAny<string>(), It.IsAny<object>(), It.IsAny<Context>()))
                .Callback((string key, object obj, Context context) =>
                {
                    System.Console.WriteLine($"Saving SharedStorage Key={key}");
                    this.sharedStorageValues[key] = JsonConvert.SerializeObject(obj);
                });
            this.sharedStorageMock.Setup(o => o.InsertRowAtTable(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<Context>()))
                .Callback((string key, string obj, Context context) =>
                {
                    System.Console.WriteLine($"Saving SharedStorage Key={key}");
                    this.sharedStorageValues[key] = obj;
                });
            this.sharedStorageMock.Setup(o => o.GetRowFromTable(It.IsAny<string>(), It.IsAny<Type>(), It.IsAny<Context>()))
                .Callback((string key, Type obj, Context context) =>
                {
                    System.Console.WriteLine($"Extracting SharedStorage Key={key}");
                    if (!this.sharedStorageValues.ContainsKey(key))
                    {
                        throw new Prime.Base.Exceptions.FatalException($"[{key}] not found in shared storage.");
                    }
                })
                .Returns((string key, Type obj, Context context) => JsonConvert.DeserializeObject(this.sharedStorageValues[key], obj));
            this.sharedStorageMock.Setup(o => o.GetStringRowFromTable(It.IsAny<string>(), It.IsAny<Context>()))
                .Callback((string key, Context context) =>
                {
                    System.Console.WriteLine($"Extracting SharedStorage Key={key}");
                    if (!this.sharedStorageValues.ContainsKey(key))
                    {
                        throw new Prime.Base.Exceptions.FatalException($"[{key}] not found in shared storage.");
                    }
                })
                .Returns((string key, Context context) => this.sharedStorageValues[key]);
            this.sharedStorageMock.Setup(o => o.KeyExistsInObjectTable(It.IsAny<string>(), It.IsAny<Context>()))
                .Callback((string key, Context context) =>
                {
                    if (this.sharedStorageValues.ContainsKey(key))
                    {
                        System.Console.WriteLine($"SharedStorage Key={key} exists in table.");
                    }
                    else
                    {
                        System.Console.WriteLine($"SharedStorage Key={key} exists in table.");
                    }
                })
                .Returns((string key, Context context) => this.sharedStorageValues.ContainsKey(key));
            Prime.Services.SharedStorageService = this.sharedStorageMock.Object;

            // Default Mock for Shared service.
            this.dffdata = new Dictionary<string, string>();
            this.dffStorageMock = new Mock<IDffService>(MockBehavior.Strict);
            this.dffStorageMock.Setup(o => o.SetDff(It.IsAny<string>(), It.IsAny<string>()))
                .Callback((string key, string value) =>
                {
                    System.Console.WriteLine($"Saving DFF Key={key}, Value written {value}");
                    if (!this.dffdata.ContainsKey(key))
                    {
                        this.dffdata.Add(key, value);
                    }
                    else
                    {
                        this.dffdata[key] = value;
                    }
                });
            this.dffStorageMock.Setup(o => o.GetDff(It.IsAny<string>(), true))
                .Callback((string key, bool log) =>
                {
                    System.Console.WriteLine($"Reading DFF Key={key}, Value expected {this.dffdata[key]}");
                }).Returns((string key, bool log) => this.dffdata[key]);
            Prime.Services.DffService = this.dffStorageMock.Object;

            // this.VoltageConfiguration = "DLVR";
            // this.FivrCondition = "FivrCondition";
            this.vminForwardingMock = new Mock<IVminForwardingCorner>(MockBehavior.Strict);
            var vminForwardingFactoryMock = new Mock<IVminForwardingFactory>(MockBehavior.Strict);
            vminForwardingFactoryMock.Setup(f => f.Get(It.IsAny<string>(), It.IsAny<int>())).Returns(this.vminForwardingMock.Object);
            vminForwardingFactoryMock.Setup(o => o.IsSinglePointMode()).Returns(false);

            this.pinMapMock = new Mock<IPinMap>(MockBehavior.Strict);
            var pinMapFactoryMock = new Mock<IPinMapFactory>(MockBehavior.Strict);
            pinMapFactoryMock.Setup(p => p.Get(It.IsAny<string>())).Returns(this.pinMapMock.Object);

            // this.voltageConverterMock = new Mock<IVoltageConverter>(MockBehavior.Strict);
            // var voltageConverterFactoryMock = new Mock<IVoltageConverterFactory>(MockBehavior.Strict);
            // voltageConverterFactoryMock.Setup(v => v.Get(this.VoltageConfiguration, this.LevelsTc)).Returns(this.voltageConverterMock.Object);
            var fileservice = new Mock<IFileService>(MockBehavior.Strict);
            fileservice.Setup(f => f.GetFile(It.IsAny<string>())).Returns<string>(s =>
            {
                if (s.Contains("Exampleconfig_WW40_v2_PerPattern.json"))
                {
                    return Environment.CurrentDirectory + "\\..\\..\\src\\TestMethods\\Digital\\ARR_MBIST\\MbistVminTC\\InputFiles\\Exampleconfig_WW40_v2_PerPattern.json";
                }
                else if (s.Contains("Recovery_v2.json"))
                {
                    return Environment.CurrentDirectory + "\\..\\..\\src\\TestMethods\\Digital\\ARR_MBIST\\MbistVminTC\\InputFiles\\Recovery_v2.json";
                }
                else
                {
                    return null;
                }
            });
            Prime.Services.FileService = fileservice.Object;

            DDG.VminForwarding.Service = vminForwardingFactoryMock.Object;
            DDG.PinMap.Service = pinMapFactoryMock.Object;

            // DDG.VoltageConverter.Service = voltageConverterFactoryMock.Object;
            // Default Mock for Console Service
            this.ConsoleServiceMock = new Mock<IConsoleService>(MockBehavior.Strict);
            this.ConsoleServiceMock.Setup(o => o.PrintDebug(It.IsAny<string>())).Callback((string s) => { System.Console.WriteLine(s); });
            this.ConsoleServiceMock.Setup(o => o.PrintError(It.IsAny<string>(), It.IsAny<int>(), It.IsAny<string>(), It.IsAny<string>())).
            Callback<string, int, string, string>((string msg, int line, string n, string src) => { System.Console.WriteLine($"ERROR: {msg}"); });
            Prime.Services.ConsoleService = this.ConsoleServiceMock.Object;
        }

        /// <summary>
        /// Test the Compression to make sure its working.
        /// </summary>
        [TestMethod]
        public void BisrCompress()
        {
            var compresscapture = string.Concat(Enumerable.Repeat("0", 41));
            var temp = string.Concat(Enumerable.Repeat("0", 233)) + "101" + string.Concat(Enumerable.Repeat("0", 65));
            compresscapture += temp;
            temp = string.Concat(Enumerable.Repeat("0", 61));
            compresscapture += temp;
            var bisr1 = new BisrCompress()
            {
                BufferSize = 7,
                ZeroSize = 17,
                FuseboxSize = 256,
                Totallength = 403,
                FuseboxAddress = 10,
                MaxSessions = 3,
                Chains = new List<int> { 41, 301, 61 },
                AutonomousModeBurn = false,
            };

            var oldfuseval = string.Empty;

            // var oldfuseval = "00100000000000000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101";
            compresscapture = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);

            Assert.IsTrue(compressed["Compress"]);
            Assert.AreEqual(compressed["FuseToApply"], "00100000000000000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101");
            Assert.AreEqual(compressed["FuseAfterBurn"], "00100000000000000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101");
            Assert.IsTrue(compressed["AvailableFuse"]);
        }

/*        /// <summary>
        /// Test the Compression to make sure its working.
        /// </summary>
        [TestMethod]
        public void BisrCompress_GNRIO_parcpmaram()
        {
            var compresscapture
            compresscapture = new string('0', 5684);
            compresscapture = compresscapture + "1101";
            var intvar = 6517 - compresscapture.Length;
            compresscapture = compresscapture + new string('0', intvar);

            // compresscapture = compresscapture.Reverse();
            var bisr1 = new BisrCompress()
            {
                BufferSize = 18,
                ZeroSize = 17,
                FuseboxSize = 1024,
                Totallength = 6517,
                FuseboxAddress = 10,
                MaxSessions = 1,
                Chains = new List<int> { 305, 1729, 385, 3724, 824 },
                AutonomousModeBurn = true,
            };

            var oldfuseval = string.Empty;

            // var oldfuseval = "00100000000000000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101";
            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);
            var str = "1000110010000000001000001101100000001000000110000000000000010111000001100110000000001110011000000001001111000111001100010101010000101110000";

            // str = str.Reverse();
            Assert.IsTrue(compressed["Compress"]);
            Assert.AreEqual(str, compressed["FuseToApply"]);
            Assert.AreEqual(str, compressed["FuseAfterBurn"]);
            Assert.IsTrue(compressed["AvailableFuse"]);
        }*/

/*        /// <summary>
        /// Test the Compression to make sure its working.
        /// </summary>
        [TestMethod]
        public void BisrCompress_GNRIO_parcpmssme_xa()
        {
            var compresscapture
            compresscapture = new string('0', 2074);
            compresscapture = compresscapture + "1111";
            var intvar = 6517 - compresscapture.Length;
            compresscapture = compresscapture + new string('0', intvar);

            compresscapture = compresscapture.Reverse();
            var bisr1 = new BisrCompress()
            {
                BufferSize = 18,
                ZeroSize = 17,
                FuseboxSize = 1024,
                Totallength = 6517,
                FuseboxAddress = 10,
                MaxSessions = 1,
                Chains = new List<int> { 824, 3274, 385, 1729, 305 },
                AutonomousModeBurn = true,
            };

            var oldfuseval = string.Empty;

            // oldfuseval = "1000110010000000001000001101100000001110001010000000000000000000000011110001010000000000000101001100110000000001110011000000000010100100010000010000110010000101110000";
            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);
            var str = "1000110010000000001000001101100000001110001010000000000000000000000011110001010000000000000101001100110000000001110011000000000010100100010000010000110010000101110000";

            str = str.Reverse();
            Assert.IsTrue(compressed["Compress"]);
            Assert.AreEqual(str, compressed["FuseToApply"]);
            Assert.AreEqual(str, compressed["FuseAfterBurn"]);
            Assert.IsTrue(compressed["AvailableFuse"]);
        }*/

        /// <summary>
        /// Test the Compression to make sure its working.
        /// </summary>
        [TestMethod]
        public void BisrCompress_GNRIO_pariiommu()
        {
            var compresscapture
            compresscapture = compresscapture.Reverse();
            var bisr1 = new BisrCompress()
            {
                BufferSize = 18,
                ZeroSize = 17,
                FuseboxSize = 512,
                Totallength = 2123,
                FuseboxAddress = 9,
                MaxSessions = 1,
                Chains = new List<int> { 2123 },
                AutonomousModeBurn = true,
            };

            var oldfuseval = string.Empty;

            // var oldfuseval = "00100000000000000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101";
            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);
            var str = "011011000100000000000000000000001011110000000110000000";

            str = str.Reverse();
            Assert.IsTrue(compressed["Compress"]);
            Assert.AreEqual(str, compressed["FuseToApply"]);
            Assert.AreEqual(str, compressed["FuseAfterBurn"]);
            Assert.IsTrue(compressed["AvailableFuse"]);
        }

/*        /// <summary>
        /// Test the Compression to make sure its working.
        /// </summary>
        [TestMethod]
        public void BisrCompress_GNRCPU_epr_reset()
        {
            var compresscapture = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            compresscapture = compresscapture.Reverse();
            var bisr1 = new BisrCompress()
            {
                BufferSize = 7,
                ZeroSize = 17,
                FuseboxSize = 512,
                Totallength = 471,
                FuseboxAddress = 10,
                MaxSessions = 1,
                Chains = new List<int> { 471 },
                AutonomousModeBurn = true,
            };

            var oldfuseval = string.Empty;

            // var oldfuseval = "00100000000000000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101";
            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);
            var str = "0000001100000000000110001100011110000000000";

            str = str.Reverse();
            Assert.IsTrue(compressed["Compress"]);
            Assert.AreEqual(str, compressed["FuseToApply"]);
            Assert.AreEqual(str, compressed["FuseAfterBurn"]);
            Assert.IsTrue(compressed["AvailableFuse"]);
        } */

        /// <summary>
        /// Test the Compression to make sure its working.
        /// </summary>
        [TestMethod]
        public void BisrCompress_GNRCPU_fmb()
        {
            var compresscapture
            compresscapture = compresscapture.Reverse();
            var bisr1 = new BisrCompress()
            {
                BufferSize = 7,
                ZeroSize = 17,
                FuseboxSize = 512,
                Totallength = 1097,
                FuseboxAddress = 10,
                MaxSessions = 1,
                Chains = new List<int> { 1097 },
                AutonomousModeBurn = true,
            };

            var oldfuseval = string.Empty;

            // var oldfuseval = "00100000000000000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101";
            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);
            var str = "1100100011000000000001011111101001000000000";

            str = str.Reverse();
            Assert.IsTrue(compressed["Compress"]);
            Assert.AreEqual(str, compressed["FuseToApply"]);
            Assert.AreEqual(str, compressed["FuseAfterBurn"]);
            Assert.IsTrue(compressed["AvailableFuse"]);
        }

        /// <summary>
        /// Test the Compression to make sure its working.
        /// </summary>
        [TestMethod]
        public void BisrCompress_GNRCPU_cpu_tile()
        {
            var compresscapture
            compresscapture = compresscapture.Reverse();
            var bisr1 = new BisrCompress()
            {
                BufferSize = 7,
                ZeroSize = 17,
                FuseboxSize = 512,
                Totallength = 495,
                FuseboxAddress = 10,
                MaxSessions = 1,
                Chains = new List<int> { 495 },
                AutonomousModeBurn = true,
            };

            var oldfuseval = string.Empty;

            // var oldfuseval = "00100000000000000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101";
            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);
            var str = "1011000000000000001010001110110111000000000";

            str = str.Reverse();
            Assert.IsTrue(compressed["Compress"]);
            Assert.AreEqual(str, compressed["FuseToApply"]);
            Assert.AreEqual(str, compressed["FuseAfterBurn"]);
            Assert.IsTrue(compressed["AvailableFuse"]);
        }

        /// <summary> Test the Compression to make sure its working. </summary>
        [TestMethod]
        public void BisrCompress_2session_AutonomousBurn()
        {
            var compresscapture = string.Concat(Enumerable.Repeat("0", 41));
            var temp = string.Concat(Enumerable.Repeat("0", 233)) + "101" + string.Concat(Enumerable.Repeat("0", 65));
            compresscapture += temp;
            temp = string.Concat(Enumerable.Repeat("0", 61));
            compresscapture += temp;
            var bisr1 = new BisrCompress()
            {
                BufferSize = 7,
                ZeroSize = 17,
                FuseboxSize = 256,
                Totallength = 403,
                FuseboxAddress = 10,
                MaxSessions = 3,
                Chains = new List<int> { 41, 301, 61 },
                AutonomousModeBurn = true,
            };

            // var oldfuseval = string.Empty;
            var oldfuseval = "00100000000000000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101";
            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);

            Assert.IsTrue(compressed["Compress"]);
            Assert.AreEqual(compressed["FuseToApply"], "01000011110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000110010110000000000001010010000000000111010011010000000000000000111101000000000000111101");
            Assert.AreEqual(compressed["FuseAfterBurn"], "01100011110100000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101001010000000110010110000000000001010010000000000111010011010000000000000000111101000000000000111101");
            Assert.IsTrue(compressed["AvailableFuse"]);
        }

        /// <summary> Test the Compression to make sure its working. </summary>
        [TestMethod]
        public void BisrNoSessions_Available()
        {
            var bisr1 = new BisrCompress()
            {
                BufferSize = 7,
                ZeroSize = 17,
                FuseboxSize = 500,
                Totallength = 403,
                FuseboxAddress = 10,
                MaxSessions = 3,
                Chains = new List<int> { 41, 301, 61 },
                AutonomousModeBurn = true,
            };

            Assert.IsTrue(bisr1.BreakdownOldFuse("11100011110100011011101000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101001010000000110010110000000000001010010000000000111010011010000000000000000111101000000000000111101010000001101001011100000000000001010010000000000111010011010000000000000000111101000000000000111101"));
        }

        /// <summary> Test the Compression to make sure its working. </summary>
        [TestMethod]
        public void BisrCompress_Session2()
        {
            var bisr1 = new BisrCompress()
            {
                BufferSize = 7,
                ZeroSize = 17,
                FuseboxSize = 256,
                Totallength = 403,
                FuseboxAddress = 10,
                MaxSessions = 3,
                Chains = new List<int> { 41, 301, 61 },
                AutonomousModeBurn = false,
            };
            var compresscapture = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

            // var oldfuseval = string.Empty;
            var oldfuseval = "00100000000000000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101";

            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);

            Assert.IsTrue(compressed["Compress"]);
            Assert.AreEqual(compressed["FuseToApply"], "0100001111010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111010001101000000000000000101001");
            Assert.AreEqual(compressed["FuseAfterBurn"], "0110001111010000000000000001111010001101000000000000000101001000000000011101001101000000000000000011110100000000000011110100001111010001101000000000000000101001");
            Assert.IsTrue(compressed["AvailableFuse"]);
        }

        /// <summary> Test the Compression to make sure its working. </summary>
        [TestMethod]
        public void BisrCompress_TooManySessions()
        {
            var compresscapture = "11100011110100011011101000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101001010000000110010110000000000001010010000000000111010011010000000000000000111101000000000000111101010000001101001011100000000000001010010000000000111010011010000000000000000111101000000000000111101";
            var bisr1 = new BisrCompress()
            {
                BufferSize = 7,
                ZeroSize = 17,
                FuseboxSize = 512,
                Totallength = 403,
                FuseboxAddress = 10,
                MaxSessions = 3,
                Chains = new List<int> { 41, 301, 61 },
                AutonomousModeBurn = true,
            };
            bisr1.PrintMode = global::MbistVminTC.BisrCompress.PrintType.Console;
            var oldfuseval = "11100011110100011011101000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101001010000000110010110000000000001010010000000000111010011010000000000000000111101000000000000111101010000001101001011100000000000001010010000000000111010011010000000000000000111101000000000000111101";
            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);

            Assert.IsFalse(compressed["Compress"]);
            Assert.AreEqual(compressed["FuseToApply"], string.Empty);
            Assert.AreEqual(compressed["FuseAfterBurn"], "11100011110100011011101000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101001010000000110010110000000000001010010000000000111010011010000000000000000111101000000000000111101010000001101001011100000000000001010010000000000111010011010000000000000000111101000000000000111101");
            Assert.IsFalse(compressed["AvailableFuse"]);
        }

        /// <summary> Test the Compression to make sure its working. </summary>
        [TestMethod]
        public void BisrCompress_3rdSession_Autonomous_ConsolePrint()
        {
            var compresscapture = string.Concat(Enumerable.Repeat("0", 41));
            var temp = string.Concat(Enumerable.Repeat("0", 233)) + "101" + string.Concat(Enumerable.Repeat("0", 65));
            compresscapture += temp;
            temp = string.Concat(Enumerable.Repeat("0", 61));
            compresscapture += temp;
            var bisr1 = new BisrCompress()
            {
                BufferSize = 7,
                ZeroSize = 17,
                FuseboxSize = 512,
                Totallength = 403,
                FuseboxAddress = 10,
                MaxSessions = 3,
                Chains = new List<int> { 41, 301, 61 },
                AutonomousModeBurn = true,
            };
            bisr1.PrintMode = global::MbistVminTC.BisrCompress.PrintType.Console;
            var oldfuseval = "01100011110100000000000000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101001010000000110010110000000000001010010000000000111010011010000000000000000111101000000000000111101";
            var compressed = bisr1.CompressChains(compresscapture, oldfuseval);

            Assert.IsTrue(compressed["Compress"]);
            Assert.AreEqual(compressed["FuseToApply"], "10000000000000011011101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000001101001011100000000000001010010000000000111010011010000000000000000111101000000000000111101");
            Assert.AreEqual(compressed["FuseAfterBurn"], "11100011110100011011101000011110100011010000000000000001010010000000000111010011010000000000000000111101000000000000111101001010000000110010110000000000001010010000000000111010011010000000000000000111101000000000000111101010000001101001011100000000000001010010000000000111010011010000000000000000111101000000000000111101");
        }

        /// <summary>
        /// Test the Compression to make sure its working.
        /// </summary>
        [TestMethod]
        public void BisrChainValidation()
        {
            var undertest = new BisrChainResult("MBIST_BP0", "0000000", true, "000001", "000001", new List<string>(), "Name", "Name", "MBIST_BP0", Prime.Services.ConsoleService, true);
            undertest.AvailableFuse = false;
            Assert.IsFalse(undertest.AvailableFuse);

            Assert.AreEqual("Name", undertest.ITuffName);
            Assert.AreEqual("Name", undertest.DffName);

            undertest.WriteData(BisrModes.Compressed, false);
            undertest.ReadData(BisrModes.Compressed, false);

            Assert.AreEqual("000001", undertest.FuseToApply);

            undertest.FuseToApply = "100001";
            undertest.WriteData(BisrModes.Compressed, true);
            undertest.ReadData(BisrModes.Compressed, true);
            Assert.AreEqual("100001", undertest.FuseToApply);

            Assert.AreEqual("100001", undertest.Fusepatmod(BisrModes.Compressed));
            Assert.AreEqual("0000000", undertest.Fusepatmod(BisrModes.Bisr));
        }
    }
}
