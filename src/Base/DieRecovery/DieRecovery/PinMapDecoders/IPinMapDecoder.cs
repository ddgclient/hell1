// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INTEL CONFIDENTIAL
// Copyright (2019) (2022) Intel Corporation
//
// The source code contained or described herein and all documents related to the source code ("Material") are
// owned by Intel Corporation or its suppliers or licensors. Title to the Material remains with Intel Corporation
// or its suppliers and licensors. The Material contains trade secrets and proprietary and confidential
// information of Intel Corporation or its suppliers and licensors. The Material is protected by worldwide copyright
// and trade secret laws and treaty provisions. No part of the Material may be used, copied, reproduced, modified,
// published, uploaded, posted, transmitted, distributed, or disclosed in any way without Intel Corporation's prior express
// written permission.
//
// No license under any patent, copyright, trade secret or other intellectual property right is granted to or
// conferred upon you by disclosure or delivery of the Materials, either expressly, by implication, inducement,
// estoppel or otherwise. Any license under such intellectual property rights must be express and approved by
// Intel in writing.
// ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace DDG
{
    using System.Collections;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Prime.FunctionalService;
    using Prime.PatConfigService;

    /// <summary>
    /// Defines the <see cref="IPinMapDecoder" />.
    /// </summary>
    public interface IPinMapDecoder
    {
        /// <summary>
        /// Gets or sets the Name of this PlistDecoder object.
        /// </summary>
        [JsonProperty("Name")]
        string Name { get; set; }

        /// <summary>
        /// Gets or sets the name of the Pattern Configuration used to Enable/Disable this IP.
        /// </summary>
        [JsonProperty("PatternModify")]
        string IpPatternConfigure { get; set; }

        /// <summary>
        /// Gets or sets the Size of the Tracker BitArray generated by this decoder.
        /// </summary>
        [JsonProperty("Size")]
        int NumberOfTrackerElements { get; set; }

        /// <summary>
        /// Gets or sets the decoder result in the indicated SharedStorage token.
        /// </summary>
        [JsonProperty("SharedStorageResults")]
        string SharedStorageResults { get; set; }

        /// <summary>
        /// Returns typeof decoder as string.
        /// </summary>
        /// <returns>typeof decoder.</returns>
        string GetDecoderType();

        /// <summary>
        /// Generates a BitArray where each element refers to a separately tracked item (usually core or slice).
        /// A true value means that element had a failure.
        /// </summary>
        /// <param name="functionalTest">A <see cref="IFunctionalTest"/> object containing the test execution results.</param>
        /// <param name="currentSlice">Optional parameter indicating the currently selected slice/core. Default is null meaning all are tested in parallel.</param>
        /// <returns>A BitArray=<see cref="BitArray"/>.</returns>
        BitArray GetFailTrackerFromPlistResults(IFunctionalTest functionalTest, int? currentSlice = null);

        /// <summary>
        /// Given a BitArray with one element per tracked item, where true means that element had a failure,
        /// returns the list of pins to mask. The functionalTest is pass-by-reference so it can be updated, however
        /// the pin masking should not be done here.
        /// </summary>
        /// <param name="mask">BitArray with one element per tracked item.</param>
        /// <param name="plist">A <see cref="IFunctionalTest"/> object containing the functionalTest to mask.</param>
        /// <returns>The list of pins to mask.</returns>
        List<string> MaskPlistFromTracker(BitArray mask, ref IFunctionalTest plist);

        /// <summary>
        /// Gets a <see cref="IPatConfigHandle"/> to enable/disable this IP according to the given BitArray.
        /// </summary>
        /// <param name="iPConfigBits">BitArray representing enable/disable for this IP (true == disable, false == enable).</param>
        /// <param name="patlist">Specific PList to associated with the pattern modify (if null or string.Empty, it should affect all plists).</param>
        /// <returns><see cref="IPatConfigHandle"/>.</returns>
        IPatConfigHandle GetPatConfigForSliceControl(BitArray iPConfigBits, string patlist);

        /// <summary>
        /// Applies plist settings for the given IFunctionalTestForSearch object using
        /// the BitArray representing a Tracking structure.
        /// </summary>
        /// <param name="mask">Bit array containing the mask to apply.</param>
        /// <param name="plist">PList object to apply the mask to.</param>
        void ApplyPlistSettings(BitArray mask, ref IFunctionalTest plist);

        /// <summary>
        /// Resets or restores patterns and/or plists based on decoder configuration.
        /// </summary>
        void Restore();

        /// <summary>
        /// Saves decoded result to SharedStorage token specified in the configuration file.
        /// </summary>
        /// <param name="results">Decoded BitArray.</param>
        void SaveResultsToSharedStorage(BitArray results);

        /// <summary>
        /// Verify routine to be called during init.
        /// </summary>
        /// <param name="plist">PList object.</param>
        void Verify(ref IFunctionalTest plist);
    }
}
